'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Liquidation_DataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Liquidation_DataSet
    Inherits Global.System.Data.DataSet
    
    Private tableLiquidation As LiquidationDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Liquidation")) Is Nothing) Then
                MyBase.Tables.Add(New LiquidationDataTable(ds.Tables("Liquidation")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Liquidation() As LiquidationDataTable
        Get
            Return Me.tableLiquidation
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Liquidation_DataSet = CType(MyBase.Clone,Liquidation_DataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("Liquidation")) Is Nothing) Then
                MyBase.Tables.Add(New LiquidationDataTable(ds.Tables("Liquidation")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableLiquidation = CType(MyBase.Tables("Liquidation"),LiquidationDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLiquidation) Is Nothing) Then
                Me.tableLiquidation.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "Liquidation_DataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Liquidation_DataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableLiquidation = New LiquidationDataTable()
        MyBase.Tables.Add(Me.tableLiquidation)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeLiquidation() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Liquidation_DataSet = New Liquidation_DataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub LiquidationRowChangeEventHandler(ByVal sender As Object, ByVal e As LiquidationRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LiquidationDataTable
        Inherits Global.System.Data.TypedTableBase(Of LiquidationRow)
        
        Private columnLiquidationid As Global.System.Data.DataColumn
        
        Private columnvoucherid As Global.System.Data.DataColumn
        
        Private columninvoicedate As Global.System.Data.DataColumn
        
        Private columncategory As Global.System.Data.DataColumn
        
        Private columnparticular As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnprice As Global.System.Data.DataColumn
        
        Private columntotal As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        Private columnapprovedAmount As Global.System.Data.DataColumn
        
        Private columnevaluationdate As Global.System.Data.DataColumn
        
        Private columnfindings As Global.System.Data.DataColumn
        
        Private columnattachment As Global.System.Data.DataColumn
        
        Private columnevaluatedby As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Liquidation"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LiquidationidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLiquidationid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property voucheridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvoucherid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property invoicedateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvoicedate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property categoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property particularColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnparticular
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property totalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property approvedAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnapprovedAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property evaluationdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnevaluationdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property findingsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfindings
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property attachmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnattachment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property evaluatedbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnevaluatedby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LiquidationRow
            Get
                Return CType(Me.Rows(index),LiquidationRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LiquidationRowChanging As LiquidationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LiquidationRowChanged As LiquidationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LiquidationRowDeleting As LiquidationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LiquidationRowDeleted As LiquidationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddLiquidationRow(ByVal row As LiquidationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddLiquidationRow(ByVal voucherid As Integer, ByVal invoicedate As Date, ByVal category As String, ByVal particular As String, ByVal qty As Integer, ByVal price As Decimal, ByVal total As Decimal, ByVal status As String, ByVal approvedAmount As Decimal, ByVal evaluationdate As Date, ByVal findings As String, ByVal attachment() As Byte, ByVal evaluatedby As String) As LiquidationRow
            Dim rowLiquidationRow As LiquidationRow = CType(Me.NewRow,LiquidationRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, voucherid, invoicedate, category, particular, qty, price, total, status, approvedAmount, evaluationdate, findings, attachment, evaluatedby}
            rowLiquidationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLiquidationRow)
            Return rowLiquidationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByLiquidationid(ByVal Liquidationid As Long) As LiquidationRow
            Return CType(Me.Rows.Find(New Object() {Liquidationid}),LiquidationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LiquidationDataTable = CType(MyBase.Clone,LiquidationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LiquidationDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnLiquidationid = MyBase.Columns("Liquidationid")
            Me.columnvoucherid = MyBase.Columns("voucherid")
            Me.columninvoicedate = MyBase.Columns("invoicedate")
            Me.columncategory = MyBase.Columns("category")
            Me.columnparticular = MyBase.Columns("particular")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnprice = MyBase.Columns("price")
            Me.columntotal = MyBase.Columns("total")
            Me.columnstatus = MyBase.Columns("status")
            Me.columnapprovedAmount = MyBase.Columns("approvedAmount")
            Me.columnevaluationdate = MyBase.Columns("evaluationdate")
            Me.columnfindings = MyBase.Columns("findings")
            Me.columnattachment = MyBase.Columns("attachment")
            Me.columnevaluatedby = MyBase.Columns("evaluatedby")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnLiquidationid = New Global.System.Data.DataColumn("Liquidationid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLiquidationid)
            Me.columnvoucherid = New Global.System.Data.DataColumn("voucherid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvoucherid)
            Me.columninvoicedate = New Global.System.Data.DataColumn("invoicedate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvoicedate)
            Me.columncategory = New Global.System.Data.DataColumn("category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncategory)
            Me.columnparticular = New Global.System.Data.DataColumn("particular", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnparticular)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnprice = New Global.System.Data.DataColumn("price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprice)
            Me.columntotal = New Global.System.Data.DataColumn("total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotal)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.columnapprovedAmount = New Global.System.Data.DataColumn("approvedAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnapprovedAmount)
            Me.columnevaluationdate = New Global.System.Data.DataColumn("evaluationdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnevaluationdate)
            Me.columnfindings = New Global.System.Data.DataColumn("findings", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfindings)
            Me.columnattachment = New Global.System.Data.DataColumn("attachment", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnattachment)
            Me.columnevaluatedby = New Global.System.Data.DataColumn("evaluatedby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnevaluatedby)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLiquidationid}, true))
            Me.columnLiquidationid.AutoIncrement = true
            Me.columnLiquidationid.AutoIncrementSeed = -1
            Me.columnLiquidationid.AutoIncrementStep = -1
            Me.columnLiquidationid.AllowDBNull = false
            Me.columnLiquidationid.Unique = true
            Me.columncategory.MaxLength = 50
            Me.columnparticular.MaxLength = 250
            Me.columnstatus.MaxLength = 25
            Me.columnevaluatedby.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewLiquidationRow() As LiquidationRow
            Return CType(Me.NewRow,LiquidationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LiquidationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LiquidationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LiquidationRowChangedEvent) Is Nothing) Then
                RaiseEvent LiquidationRowChanged(Me, New LiquidationRowChangeEvent(CType(e.Row,LiquidationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LiquidationRowChangingEvent) Is Nothing) Then
                RaiseEvent LiquidationRowChanging(Me, New LiquidationRowChangeEvent(CType(e.Row,LiquidationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LiquidationRowDeletedEvent) Is Nothing) Then
                RaiseEvent LiquidationRowDeleted(Me, New LiquidationRowChangeEvent(CType(e.Row,LiquidationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LiquidationRowDeletingEvent) Is Nothing) Then
                RaiseEvent LiquidationRowDeleting(Me, New LiquidationRowChangeEvent(CType(e.Row,LiquidationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveLiquidationRow(ByVal row As LiquidationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Liquidation_DataSet = New Liquidation_DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LiquidationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class LiquidationRow
        Inherits Global.System.Data.DataRow
        
        Private tableLiquidation As LiquidationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLiquidation = CType(Me.Table,LiquidationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Liquidationid() As Long
            Get
                Return CType(Me(Me.tableLiquidation.LiquidationidColumn),Long)
            End Get
            Set
                Me(Me.tableLiquidation.LiquidationidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property voucherid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLiquidation.voucheridColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'voucherid' in table 'Liquidation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLiquidation.voucheridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property invoicedate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLiquidation.invoicedateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'invoicedate' in table 'Liquidation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLiquidation.invoicedateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property category() As String
            Get
                Try 
                    Return CType(Me(Me.tableLiquidation.categoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'category' in table 'Liquidation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLiquidation.categoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property particular() As String
            Get
                Try 
                    Return CType(Me(Me.tableLiquidation.particularColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'particular' in table 'Liquidation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLiquidation.particularColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLiquidation.qtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qty' in table 'Liquidation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLiquidation.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLiquidation.priceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'price' in table 'Liquidation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLiquidation.priceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLiquidation.totalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'total' in table 'Liquidation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLiquidation.totalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property status() As String
            Get
                Try 
                    Return CType(Me(Me.tableLiquidation.statusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'status' in table 'Liquidation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLiquidation.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property approvedAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLiquidation.approvedAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'approvedAmount' in table 'Liquidation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLiquidation.approvedAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property evaluationdate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLiquidation.evaluationdateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'evaluationdate' in table 'Liquidation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLiquidation.evaluationdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property findings() As String
            Get
                Try 
                    Return CType(Me(Me.tableLiquidation.findingsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'findings' in table 'Liquidation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLiquidation.findingsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property attachment() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableLiquidation.attachmentColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'attachment' in table 'Liquidation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLiquidation.attachmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property evaluatedby() As String
            Get
                Try 
                    Return CType(Me(Me.tableLiquidation.evaluatedbyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'evaluatedby' in table 'Liquidation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLiquidation.evaluatedbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsvoucheridNull() As Boolean
            Return Me.IsNull(Me.tableLiquidation.voucheridColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetvoucheridNull()
            Me(Me.tableLiquidation.voucheridColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsinvoicedateNull() As Boolean
            Return Me.IsNull(Me.tableLiquidation.invoicedateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetinvoicedateNull()
            Me(Me.tableLiquidation.invoicedateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IscategoryNull() As Boolean
            Return Me.IsNull(Me.tableLiquidation.categoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetcategoryNull()
            Me(Me.tableLiquidation.categoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsparticularNull() As Boolean
            Return Me.IsNull(Me.tableLiquidation.particularColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetparticularNull()
            Me(Me.tableLiquidation.particularColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableLiquidation.qtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetqtyNull()
            Me(Me.tableLiquidation.qtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IspriceNull() As Boolean
            Return Me.IsNull(Me.tableLiquidation.priceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetpriceNull()
            Me(Me.tableLiquidation.priceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IstotalNull() As Boolean
            Return Me.IsNull(Me.tableLiquidation.totalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SettotalNull()
            Me(Me.tableLiquidation.totalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsstatusNull() As Boolean
            Return Me.IsNull(Me.tableLiquidation.statusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetstatusNull()
            Me(Me.tableLiquidation.statusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsapprovedAmountNull() As Boolean
            Return Me.IsNull(Me.tableLiquidation.approvedAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetapprovedAmountNull()
            Me(Me.tableLiquidation.approvedAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsevaluationdateNull() As Boolean
            Return Me.IsNull(Me.tableLiquidation.evaluationdateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetevaluationdateNull()
            Me(Me.tableLiquidation.evaluationdateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsfindingsNull() As Boolean
            Return Me.IsNull(Me.tableLiquidation.findingsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetfindingsNull()
            Me(Me.tableLiquidation.findingsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsattachmentNull() As Boolean
            Return Me.IsNull(Me.tableLiquidation.attachmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetattachmentNull()
            Me(Me.tableLiquidation.attachmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsevaluatedbyNull() As Boolean
            Return Me.IsNull(Me.tableLiquidation.evaluatedbyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetevaluatedbyNull()
            Me(Me.tableLiquidation.evaluatedbyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class LiquidationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LiquidationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As LiquidationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As LiquidationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace Liquidation_DataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LiquidationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Npgsql.NpgsqlDataAdapter
        
        Private _connection As Global.Npgsql.NpgsqlConnection
        
        Private _transaction As Global.Npgsql.NpgsqlTransaction
        
        Private _commandCollection() As Global.Npgsql.NpgsqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Npgsql.NpgsqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Npgsql.NpgsqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Npgsql.NpgsqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Npgsql.NpgsqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Npgsql.NpgsqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Npgsql.NpgsqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Liquidation"
            tableMapping.ColumnMappings.Add("Liquidationid", "Liquidationid")
            tableMapping.ColumnMappings.Add("voucherid", "voucherid")
            tableMapping.ColumnMappings.Add("invoicedate", "invoicedate")
            tableMapping.ColumnMappings.Add("category", "category")
            tableMapping.ColumnMappings.Add("particular", "particular")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("price", "price")
            tableMapping.ColumnMappings.Add("total", "total")
            tableMapping.ColumnMappings.Add("status", "status")
            tableMapping.ColumnMappings.Add("approvedAmount", "approvedAmount")
            tableMapping.ColumnMappings.Add("evaluationdate", "evaluationdate")
            tableMapping.ColumnMappings.Add("findings", "findings")
            tableMapping.ColumnMappings.Add("attachment", "attachment")
            tableMapping.ColumnMappings.Add("evaluatedby", "evaluatedby")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Npgsql.NpgsqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""jdkqojor"".""public"".""Liquidation"" WHERE ((""Liquidationid"" = @Original"& _ 
                "_Liquidationid) AND ((@IsNull_voucherid = 1 AND ""voucherid"" IS NULL) OR (""vouche"& _ 
                "rid"" = @Original_voucherid)) AND ((@IsNull_invoicedate = 1 AND ""invoicedate"" IS "& _ 
                "NULL) OR (""invoicedate"" = @Original_invoicedate)) AND ((@IsNull_category = 1 AND"& _ 
                " ""category"" IS NULL) OR (""category"" = @Original_category)) AND ((@IsNull_particu"& _ 
                "lar = 1 AND ""particular"" IS NULL) OR (""particular"" = @Original_particular)) AND "& _ 
                "((@IsNull_qty = 1 AND ""qty"" IS NULL) OR (""qty"" = @Original_qty)) AND ((@IsNull_p"& _ 
                "rice = 1 AND ""price"" IS NULL) OR (""price"" = @Original_price)) AND ((@IsNull_tota"& _ 
                "l = 1 AND ""total"" IS NULL) OR (""total"" = @Original_total)) AND ((@IsNull_status "& _ 
                "= 1 AND ""status"" IS NULL) OR (""status"" = @Original_status)) AND ((@IsNull_approv"& _ 
                "edAmount = 1 AND ""approvedAmount"" IS NULL) OR (""approvedAmount"" = @Original_appr"& _ 
                "ovedAmount)) AND ((@IsNull_evaluationdate = 1 AND ""evaluationdate"" IS NULL) OR ("& _ 
                """evaluationdate"" = @Original_evaluationdate)) AND ((@IsNull_findings = 1 AND ""fi"& _ 
                "ndings"" IS NULL) OR (""findings"" = @Original_findings)) AND ((@IsNull_evaluatedby"& _ 
                " = 1 AND ""evaluatedby"" IS NULL) OR (""evaluatedby"" = @Original_evaluatedby)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Npgsql.NpgsqlParameter = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_Liquidationid"
            param.DbType = Global.System.Data.DbType.Int64
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Bigint
            param.IsNullable = true
            param.SourceColumn = "Liquidationid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_voucherid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "voucherid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_voucherid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "voucherid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_invoicedate"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "invoicedate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_invoicedate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "invoicedate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_category"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "category"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_category"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "category"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_particular"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "particular"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_particular"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "particular"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_qty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "qty"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_qty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "qty"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_price"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_price"
            param.DbType = Global.System.Data.DbType.Currency
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Money
            param.IsNullable = true
            param.SourceColumn = "price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_total"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "total"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_total"
            param.DbType = Global.System.Data.DbType.Currency
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Money
            param.IsNullable = true
            param.SourceColumn = "total"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_status"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_status"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_approvedAmount"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "approvedAmount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_approvedAmount"
            param.DbType = Global.System.Data.DbType.Currency
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Money
            param.IsNullable = true
            param.SourceColumn = "approvedAmount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_evaluationdate"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "evaluationdate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_evaluationdate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "evaluationdate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_findings"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "findings"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_findings"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Text
            param.IsNullable = true
            param.SourceColumn = "findings"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_evaluatedby"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "evaluatedby"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_evaluatedby"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "evaluatedby"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Npgsql.NpgsqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""jdkqojor"".""public"".""Liquidation"" (""voucherid"", ""invoicedate"", ""categ"& _ 
                "ory"", ""particular"", ""qty"", ""price"", ""total"", ""status"", ""approvedAmount"", ""evalua"& _ 
                "tiondate"", ""findings"", ""attachment"", ""evaluatedby"") VALUES (@voucherid, @invoice"& _ 
                "date, @category, @particular, @qty, @price, @total, @status, @approvedAmount, @e"& _ 
                "valuationdate, @findings, @attachment, @evaluatedby)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@voucherid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "voucherid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@invoicedate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "invoicedate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@category"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "category"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@particular"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "particular"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@qty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "qty"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@price"
            param.DbType = Global.System.Data.DbType.Currency
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Money
            param.IsNullable = true
            param.SourceColumn = "price"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@total"
            param.DbType = Global.System.Data.DbType.Currency
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Money
            param.IsNullable = true
            param.SourceColumn = "total"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@status"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "status"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@approvedAmount"
            param.DbType = Global.System.Data.DbType.Currency
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Money
            param.IsNullable = true
            param.SourceColumn = "approvedAmount"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@evaluationdate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "evaluationdate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@findings"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Text
            param.IsNullable = true
            param.SourceColumn = "findings"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@attachment"
            param.DbType = Global.System.Data.DbType.Binary
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Bytea
            param.IsNullable = true
            param.SourceColumn = "attachment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@evaluatedby"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "evaluatedby"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Npgsql.NpgsqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""jdkqojor"".""public"".""Liquidation"" SET ""voucherid"" = @voucherid, ""invoiceda"& _ 
                "te"" = @invoicedate, ""category"" = @category, ""particular"" = @particular, ""qty"" = "& _ 
                "@qty, ""price"" = @price, ""total"" = @total, ""status"" = @status, ""approvedAmount"" ="& _ 
                " @approvedAmount, ""evaluationdate"" = @evaluationdate, ""findings"" = @findings, ""a"& _ 
                "ttachment"" = @attachment, ""evaluatedby"" = @evaluatedby WHERE ((""Liquidationid"" ="& _ 
                " @Original_Liquidationid) AND ((@IsNull_voucherid = 1 AND ""voucherid"" IS NULL) O"& _ 
                "R (""voucherid"" = @Original_voucherid)) AND ((@IsNull_invoicedate = 1 AND ""invoic"& _ 
                "edate"" IS NULL) OR (""invoicedate"" = @Original_invoicedate)) AND ((@IsNull_catego"& _ 
                "ry = 1 AND ""category"" IS NULL) OR (""category"" = @Original_category)) AND ((@IsNu"& _ 
                "ll_particular = 1 AND ""particular"" IS NULL) OR (""particular"" = @Original_particu"& _ 
                "lar)) AND ((@IsNull_qty = 1 AND ""qty"" IS NULL) OR (""qty"" = @Original_qty)) AND ("& _ 
                "(@IsNull_price = 1 AND ""price"" IS NULL) OR (""price"" = @Original_price)) AND ((@I"& _ 
                "sNull_total = 1 AND ""total"" IS NULL) OR (""total"" = @Original_total)) AND ((@IsNu"& _ 
                "ll_status = 1 AND ""status"" IS NULL) OR (""status"" = @Original_status)) AND ((@IsN"& _ 
                "ull_approvedAmount = 1 AND ""approvedAmount"" IS NULL) OR (""approvedAmount"" = @Ori"& _ 
                "ginal_approvedAmount)) AND ((@IsNull_evaluationdate = 1 AND ""evaluationdate"" IS "& _ 
                "NULL) OR (""evaluationdate"" = @Original_evaluationdate)) AND ((@IsNull_findings ="& _ 
                " 1 AND ""findings"" IS NULL) OR (""findings"" = @Original_findings)) AND ((@IsNull_e"& _ 
                "valuatedby = 1 AND ""evaluatedby"" IS NULL) OR (""evaluatedby"" = @Original_evaluate"& _ 
                "dby)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@voucherid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "voucherid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@invoicedate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "invoicedate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@category"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "category"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@particular"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "particular"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@qty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "qty"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@price"
            param.DbType = Global.System.Data.DbType.Currency
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Money
            param.IsNullable = true
            param.SourceColumn = "price"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@total"
            param.DbType = Global.System.Data.DbType.Currency
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Money
            param.IsNullable = true
            param.SourceColumn = "total"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@status"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "status"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@approvedAmount"
            param.DbType = Global.System.Data.DbType.Currency
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Money
            param.IsNullable = true
            param.SourceColumn = "approvedAmount"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@evaluationdate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "evaluationdate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@findings"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Text
            param.IsNullable = true
            param.SourceColumn = "findings"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@attachment"
            param.DbType = Global.System.Data.DbType.Binary
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Bytea
            param.IsNullable = true
            param.SourceColumn = "attachment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@evaluatedby"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "evaluatedby"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_Liquidationid"
            param.DbType = Global.System.Data.DbType.Int64
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Bigint
            param.IsNullable = true
            param.SourceColumn = "Liquidationid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_voucherid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "voucherid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_voucherid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "voucherid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_invoicedate"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "invoicedate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_invoicedate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "invoicedate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_category"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "category"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_category"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "category"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_particular"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "particular"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_particular"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "particular"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_qty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "qty"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_qty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "qty"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_price"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_price"
            param.DbType = Global.System.Data.DbType.Currency
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Money
            param.IsNullable = true
            param.SourceColumn = "price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_total"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "total"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_total"
            param.DbType = Global.System.Data.DbType.Currency
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Money
            param.IsNullable = true
            param.SourceColumn = "total"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_status"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_status"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_approvedAmount"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "approvedAmount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_approvedAmount"
            param.DbType = Global.System.Data.DbType.Currency
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Money
            param.IsNullable = true
            param.SourceColumn = "approvedAmount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_evaluationdate"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "evaluationdate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_evaluationdate"
            param.DbType = Global.System.Data.DbType.[Date]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "evaluationdate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_findings"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "findings"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_findings"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Text
            param.IsNullable = true
            param.SourceColumn = "findings"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_evaluatedby"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "evaluatedby"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_evaluatedby"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "evaluatedby"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Npgsql.NpgsqlConnection()
            Me._connection.ConnectionString = Global.UniFAST_Tracking_System.My.MySettings.Default.jdkqojorConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Npgsql.NpgsqlCommand(2) {}
            Me._commandCollection(0) = New Global.Npgsql.NpgsqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""Liquidationid"", ""voucherid"", ""invoicedate"", ""category"", ""particular"", ""qt"& _ 
                "y"", ""price"", ""total"", ""status"", ""approvedAmount"", ""evaluationdate"", ""findings"", "& _ 
                """attachment"", ""evaluatedby"" FROM ""public"".""Liquidation"""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Npgsql.NpgsqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ""Liquidationid"", ""voucherid"", ""invoicedate"", ""category"", ""particular"", ""qt"& _ 
                "y"", ""price"", ""total"", ""status"", ""approvedAmount"", ""evaluationdate"", ""findings"", "& _ 
                """evaluatedby"", ""attachment"" FROM ""public"".""Liquidation"""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where ""voucherid"" = @vo"& _ 
                "ucherid::integer"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Npgsql.NpgsqlParameter = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "voucherid"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = "voucherid"
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.Npgsql.NpgsqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO ""jdkqojor"".""public"".""Liquidation"" (""voucherid"", ""invoicedate"", ""categ"& _ 
                "ory"", ""particular"", ""qty"", ""price"", ""total"") VALUES (@voucherid, @invoicedate, @"& _ 
                "category, @particular, @qty, @price, @total)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "voucherid"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = "voucherid"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "invoicedate"
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Date]
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = "invoicedate"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "category"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "category"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "particular"
            param.Size = 250
            param.IsNullable = true
            param.SourceColumn = "particular"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "qty"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = "qty"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "price"
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Money
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = "price"
            Me._commandCollection(2).Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "total"
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Money
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = "total"
            Me._commandCollection(2).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Liquidation_DataSet.LiquidationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Liquidation_DataSet.LiquidationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Liquidation_DataSet.LiquidationDataTable = New Liquidation_DataSet.LiquidationDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByVoucherID(ByVal dataTable As Liquidation_DataSet.LiquidationDataTable, ByVal voucherid As Object) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (voucherid Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(voucherid,Object)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByVoucherID(ByVal voucherid As Object) As Liquidation_DataSet.LiquidationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (voucherid Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(voucherid,Object)
            End If
            Dim dataTable As Liquidation_DataSet.LiquidationDataTable = New Liquidation_DataSet.LiquidationDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Liquidation_DataSet.LiquidationDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Liquidation_DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Liquidation")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal __Original_Liquidationid As Long, ByVal __Original_voucherid As Global.System.Nullable(Of Integer), ByVal __Original_invoicedate As Global.System.Nullable(Of Date), ByVal __Original_category As String, ByVal __Original_particular As String, ByVal __Original_qty As Global.System.Nullable(Of Integer), ByVal __Original_price As Global.System.Nullable(Of Decimal), ByVal __Original_total As Global.System.Nullable(Of Decimal), ByVal __Original_status As String, ByVal __Original_approvedAmount As Global.System.Nullable(Of Decimal), ByVal __Original_evaluationdate As Global.System.Nullable(Of Date), ByVal __Original_findings As String, ByVal __Original_evaluatedby As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(__Original_Liquidationid,Long)
            If (__Original_voucherid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(__Original_voucherid.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (__Original_invoicedate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(__Original_invoicedate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (__Original_category Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(__Original_category,String)
            End If
            If (__Original_particular Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(__Original_particular,String)
            End If
            If (__Original_qty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(__Original_qty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (__Original_price.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(__Original_price.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (__Original_total.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(__Original_total.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (__Original_status Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(__Original_status,String)
            End If
            If (__Original_approvedAmount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(__Original_approvedAmount.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (__Original_evaluationdate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(__Original_evaluationdate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (__Original_findings Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(__Original_findings,String)
            End If
            If (__Original_evaluatedby Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(__Original_evaluatedby,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal __voucherid As Global.System.Nullable(Of Integer), ByVal __invoicedate As Global.System.Nullable(Of Date), ByVal __category As String, ByVal __particular As String, ByVal __qty As Global.System.Nullable(Of Integer), ByVal __price As Global.System.Nullable(Of Decimal), ByVal __total As Global.System.Nullable(Of Decimal), ByVal __status As String, ByVal __approvedAmount As Global.System.Nullable(Of Decimal), ByVal __evaluationdate As Global.System.Nullable(Of Date), ByVal __findings As String, ByVal __attachment() As Byte, ByVal __evaluatedby As String) As Integer
            If (__voucherid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(__voucherid.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (__invoicedate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(__invoicedate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (__category Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(__category,String)
            End If
            If (__particular Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(__particular,String)
            End If
            If (__qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(__qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (__price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(__price.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (__total.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(__total.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (__status Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(__status,String)
            End If
            If (__approvedAmount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(__approvedAmount.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (__evaluationdate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(__evaluationdate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (__findings Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(__findings,String)
            End If
            If (__attachment Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(__attachment,Byte())
            End If
            If (__evaluatedby Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(__evaluatedby,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal __voucherid As Global.System.Nullable(Of Integer),  _
                    ByVal __invoicedate As Global.System.Nullable(Of Date),  _
                    ByVal __category As String,  _
                    ByVal __particular As String,  _
                    ByVal __qty As Global.System.Nullable(Of Integer),  _
                    ByVal __price As Global.System.Nullable(Of Decimal),  _
                    ByVal __total As Global.System.Nullable(Of Decimal),  _
                    ByVal __status As String,  _
                    ByVal __approvedAmount As Global.System.Nullable(Of Decimal),  _
                    ByVal __evaluationdate As Global.System.Nullable(Of Date),  _
                    ByVal __findings As String,  _
                    ByVal __attachment() As Byte,  _
                    ByVal __evaluatedby As String,  _
                    ByVal __Original_Liquidationid As Long,  _
                    ByVal __Original_voucherid As Global.System.Nullable(Of Integer),  _
                    ByVal __Original_invoicedate As Global.System.Nullable(Of Date),  _
                    ByVal __Original_category As String,  _
                    ByVal __Original_particular As String,  _
                    ByVal __Original_qty As Global.System.Nullable(Of Integer),  _
                    ByVal __Original_price As Global.System.Nullable(Of Decimal),  _
                    ByVal __Original_total As Global.System.Nullable(Of Decimal),  _
                    ByVal __Original_status As String,  _
                    ByVal __Original_approvedAmount As Global.System.Nullable(Of Decimal),  _
                    ByVal __Original_evaluationdate As Global.System.Nullable(Of Date),  _
                    ByVal __Original_findings As String,  _
                    ByVal __Original_evaluatedby As String) As Integer
            If (__voucherid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(__voucherid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (__invoicedate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(__invoicedate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (__category Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(__category,String)
            End If
            If (__particular Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(__particular,String)
            End If
            If (__qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(__qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (__price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(__price.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (__total.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(__total.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (__status Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(__status,String)
            End If
            If (__approvedAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(__approvedAmount.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (__evaluationdate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(__evaluationdate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (__findings Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(__findings,String)
            End If
            If (__attachment Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(__attachment,Byte())
            End If
            If (__evaluatedby Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(__evaluatedby,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(__Original_Liquidationid,Long)
            If (__Original_voucherid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(__Original_voucherid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (__Original_invoicedate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(__Original_invoicedate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (__Original_category Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(__Original_category,String)
            End If
            If (__Original_particular Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(__Original_particular,String)
            End If
            If (__Original_qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(__Original_qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (__Original_price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(__Original_price.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (__Original_total.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(__Original_total.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (__Original_status Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(__Original_status,String)
            End If
            If (__Original_approvedAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(__Original_approvedAmount.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (__Original_evaluationdate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(__Original_evaluationdate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (__Original_findings Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(__Original_findings,String)
            End If
            If (__Original_evaluatedby Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(__Original_evaluatedby,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertQueryLiquidation(ByVal voucherid As Object, ByVal invoicedate As Object, ByVal category As Object, ByVal particular As Object, ByVal qty As Object, ByVal price As Object, ByVal total As Object) As Integer
            Dim command As Global.Npgsql.NpgsqlCommand = Me.CommandCollection(2)
            If (voucherid Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(voucherid,Object)
            End If
            If (invoicedate Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(invoicedate,Object)
            End If
            If (category Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(category,Object)
            End If
            If (particular Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(particular,Object)
            End If
            If (qty Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(qty,Object)
            End If
            If (price Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(price,Object)
            End If
            If (total Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(total,Object)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _liquidationTableAdapter As LiquidationTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LiquidationTableAdapter() As LiquidationTableAdapter
            Get
                Return Me._liquidationTableAdapter
            End Get
            Set
                Me._liquidationTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._liquidationTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._liquidationTableAdapter.Connection) Is Nothing)) Then
                    Return Me._liquidationTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._liquidationTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As Liquidation_DataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._liquidationTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Liquidation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._liquidationTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As Liquidation_DataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._liquidationTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Liquidation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._liquidationTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As Liquidation_DataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._liquidationTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Liquidation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._liquidationTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As Liquidation_DataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._liquidationTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._liquidationTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._liquidationTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._liquidationTableAdapter, Me._liquidationTableAdapter.Connection)
                    Me._liquidationTableAdapter.Connection = CType(workConnection,Global.Npgsql.NpgsqlConnection)
                    Me._liquidationTableAdapter.Transaction = CType(workTransaction,Global.Npgsql.NpgsqlTransaction)
                    If Me._liquidationTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._liquidationTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._liquidationTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._liquidationTableAdapter) Is Nothing) Then
                    Me._liquidationTableAdapter.Connection = CType(revertConnections(Me._liquidationTableAdapter),Global.Npgsql.NpgsqlConnection)
                    Me._liquidationTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
